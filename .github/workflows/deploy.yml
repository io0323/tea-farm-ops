name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # フロントエンドテスト
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # バックエンドテスト
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teafarmops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run backend tests
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/teafarmops_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: ./backend/target/surefire-reports/

  # E2Eテスト
  e2e-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    defaults:
      run:
        working-directory: ./frontend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teafarmops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Start backend server
        run: |
          cd ../backend
          mvn spring-boot:run -Dspring-boot.run.profiles=test &
          sleep 30
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/teafarmops_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

      - name: Test PostgreSQL connection
        run: |
          echo "Testing PostgreSQL connection before starting frontend..."
          echo "Using credentials: postgres/postgres@localhost:5432/teafarmops_test"
          
          # Test connection with psql if available
          if command -v psql &> /dev/null; then
            echo "Testing with psql..."
            PGPASSWORD=postgres psql -h localhost -U postgres -d teafarmops_test -c "SELECT 1;" || echo "psql connection failed"
          fi
          
          # Test with netcat
          echo "Testing port connectivity..."
          nc -z localhost 5432 && echo "Port 5432 is accessible" || echo "Port 5432 is not accessible"
          
          # Check if any process is trying to connect with root user
          echo "Checking for any root user database connections..."
          ps aux | grep -i "root.*postgres" || echo "No root user postgres connections found"
          
          echo "PostgreSQL connection test completed"
        env:
          NODE_ENV: test

      - name: Start frontend server
        run: |
          echo "Starting frontend server..."
          echo "Current environment variables:"
          echo "DB_USER: $DB_USER"
          echo "DB_PASSWORD: $DB_PASSWORD"
          echo "DB_NAME: $DB_NAME"
          echo "DB_HOST: $DB_HOST"
          echo "NODE_ENV: $NODE_ENV"
          echo "CI: $CI"
          
          echo "Setting environment variables for database connection..."
          export DB_USER=postgres
          export DB_PASSWORD=postgres
          export DB_NAME=teafarmops_test
          export DB_HOST=localhost
          
          echo "Updated environment variables:"
          echo "DB_USER: $DB_USER"
          echo "DB_PASSWORD: $DB_PASSWORD"
          echo "DB_NAME: $DB_NAME"
          echo "DB_HOST: $DB_HOST"
          
          # Verify no root user references in environment
          echo "Verifying no root user references..."
          env | grep -i root || echo "No root user references found in environment"
          
          echo "Starting frontend server with proper environment..."
          HOST=0.0.0.0 npm run start &
          FRONTEND_PID=$!
          echo "Frontend server started with PID: $FRONTEND_PID"
        env:
          NODE_ENV: test
          REACT_APP_API_URL: http://localhost:8080
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: teafarmops_test
          DB_HOST: localhost
          CI: true

      - name: Wait for frontend server
        run: |
          echo "Waiting for frontend server to be ready..."
          echo "Checking server status..."
          ps aux | grep "npm run start" || echo "No npm start process found"
          echo "Waiting up to 120 seconds for server to be ready..."
          npx wait-on http://localhost:3000 --timeout 120000
          echo "Frontend server is ready!"
        env:
          NODE_ENV: test

      - name: Verify frontend server health
        run: |
          echo "Verifying frontend server health..."
          curl -f http://localhost:3000 || exit 1
          echo "Frontend server is healthy!"
        env:
          NODE_ENV: test

      - name: Run E2E tests
        run: npm run cypress:run
        env:
          CYPRESS_baseUrl: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: ./frontend/cypress/videos/
          if-no-files-found: ignore

  # セキュリティスキャン
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ビルド
  build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # デプロイ
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # ここに実際のデプロイスクリプトを追加
          # 例: kubectl apply, docker-compose up, など
        env:
          DOCKER_IMAGE: ${{ needs.build.outputs.image }}

      - name: Health check
        run: |
          echo "Performing health check..."
          # ヘルスチェックスクリプト
          sleep 30
          curl -f http://your-production-url/actuator/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "Deployment successful!"
          # Slack通知やメール通知など

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Deployment failed!"
          # 失敗通知 