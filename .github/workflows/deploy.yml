name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # フロントエンドテスト
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # バックエンドテスト
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teafarmops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run backend tests
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/teafarmops_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: ./backend/target/surefire-reports/

  # E2Eテスト
  e2e-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    defaults:
      run:
        working-directory: ./frontend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teafarmops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Start backend server
        working-directory: ./
        run: |
          cd backend
          echo "Starting backend server with database configuration:"
          echo "SPRING_DATASOURCE_URL: $SPRING_DATASOURCE_URL"
          echo "SPRING_DATASOURCE_USERNAME: $SPRING_DATASOURCE_USERNAME"
          echo "SPRING_DATASOURCE_PASSWORD: $SPRING_DATASOURCE_PASSWORD"
          mvn spring-boot:run -Dspring-boot.run.profiles=test &
          sleep 30
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/teafarmops_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

      - name: Test PostgreSQL connection
        run: |
          echo "Testing PostgreSQL connection before starting frontend..."
          echo "Using credentials: postgres/postgres@localhost:5432/teafarmops_test"
          
          # Test connection with psql if available
          if command -v psql &> /dev/null; then
            echo "Testing with psql..."
            PGPASSWORD=postgres psql -h localhost -U postgres -d teafarmops_test -c "SELECT 1;" || echo "psql connection failed"
          fi
          
          # Test with netcat
          echo "Testing port connectivity..."
          nc -z localhost 5432 && echo "Port 5432 is accessible" || echo "Port 5432 is not accessible"
          
          # Check if any process is trying to connect with root user
          echo "Checking for any root user database connections..."
          ps aux | grep -i "root.*postgres" || echo "No root user postgres connections found"
          
          # Check environment variables for any root references
          echo "Checking environment variables for root references..."
          env | grep -i root || echo "No root references in environment variables"
          
          echo "PostgreSQL connection test completed"
        env:
          NODE_ENV: test

      - name: Start frontend server
        working-directory: ./
        run: |
          echo "Starting frontend server..."
          echo "Current working directory: $(pwd)"
          echo "Current environment variables:"
          echo "NODE_ENV: $NODE_ENV"
          echo "CI: $CI"
          
          echo "Setting React environment variables..."
          # Set React environment variables explicitly
          export REACT_APP_ENVIRONMENT=test
          export REACT_APP_API_URL=http://localhost:8080
          
          echo "Updated environment variables:"
          echo "REACT_APP_ENVIRONMENT: $REACT_APP_ENVIRONMENT"
          echo "REACT_APP_API_URL: $REACT_APP_API_URL"
          
          # Verify no root user references in environment
          echo "Verifying no root user references..."
          env | grep -i root || echo "No root user references found in environment"
          
          # Check for any hardcoded database configurations
          echo "Checking for hardcoded database configurations..."
          find . -name "*.js" -o -name "*.ts" -o -name "*.json" | xargs grep -l "root.*postgres\|postgres.*root" 2>/dev/null || echo "No hardcoded root user database configs found"
          
          # Use the existing .env.test file for React Scripts
          echo "Using existing .env.test file for React Scripts..."
          echo "Current directory: $(pwd)"
          echo "Listing current directory contents:"
          ls -la
          echo "Listing frontend directory contents:"
          ls -la frontend/
          echo "Checking if .env.test exists:"
          if [ -f "frontend/.env.test" ]; then
            echo ".env.test file found, copying to .env..."
            cp frontend/.env.test frontend/.env
            echo "Frontend .env file created:"
            cat frontend/.env
          else
            echo "ERROR: .env.test file not found!"
            echo "Creating .env file manually with required settings..."
            echo "REACT_APP_ENVIRONMENT=test" > frontend/.env
            echo "REACT_APP_API_URL=http://localhost:8080" >> frontend/.env
            echo "NODE_ENV=test" >> frontend/.env
            echo "CI=true" >> frontend/.env
            echo "BROWSER=none" >> frontend/.env
            echo "PORT=3000" >> frontend/.env
            echo "HOST=0.0.0.0" >> frontend/.env
            echo "Manual .env file created:"
            cat frontend/.env
          fi
          
          echo "Starting frontend server with proper environment..."
          cd frontend
          echo "Starting npm start in frontend directory..."
          echo "Current directory: $(pwd)"
          echo "Listing package.json scripts:"
          cat package.json | grep -A 10 '"scripts"'
          
          # Start the frontend server with proper environment and logging
          echo "Starting npm start with full logging..."
          
          # Frontend should not need database environment variables
          echo "Frontend server does not require database environment variables"
          
          # Ensure proper environment variables for React Scripts
          export NODE_ENV=test
          export CI=true
          export BROWSER=none
          export PORT=3000
          export HOST=0.0.0.0
          
          echo "Environment variables set for frontend server:"
          echo "NODE_ENV: $NODE_ENV"
          echo "CI: $CI"
          echo "BROWSER: $BROWSER"
          echo "PORT: $PORT"
          echo "HOST: $HOST"
          
          echo "Starting npm start with detailed logging..."
          # Ensure server binds to all interfaces for CI environment
          echo "Starting frontend server with explicit binding..."
          npm run start > npm-start.log 2>&1 &
          FRONTEND_PID=$!
          echo "Frontend server started with PID: $FRONTEND_PID"
          
          # Monitor the startup process
          echo "Monitoring frontend server startup..."
          for i in {1..10}; do
            if ps -p $FRONTEND_PID > /dev/null; then
              echo "Frontend process is running (attempt $i)"
              echo "Recent logs:"
              tail -10 npm-start.log || echo "No logs yet"
              sleep 5
            else
              echo "Frontend process stopped unexpectedly (attempt $i)"
              break
            fi
          done
          
          # Wait a moment for the server to start
          echo "Waiting for frontend server to initialize..."
          sleep 45
          
          # Check if the process is running
          if ps -p $FRONTEND_PID > /dev/null; then
            echo "Frontend server process is running (PID: $FRONTEND_PID)"
            echo "Checking npm start logs:"
            tail -20 npm-start.log || echo "No logs available yet"
            
            # Additional process verification
            echo "Verifying all npm/node processes:"
            ps aux | grep "npm\|node" | grep -v grep || echo "No npm/node processes found"
            
                      # Check if the process is actually listening on port 3000
          echo "Checking if process is listening on port 3000:"
          echo "Using netstat to check port binding:"
          netstat -tlnp 2>/dev/null | grep :3000 || echo "Port 3000 not yet listening"
          
          echo "Using ss to check port binding:"
          ss -tlnp 2>/dev/null | grep :3000 || echo "Port 3000 not yet listening"
          
          echo "Using lsof to check port binding:"
          lsof -i :3000 2>/dev/null || echo "Port 3000 not yet listening"
            
          else
            echo "ERROR: Frontend server process failed to start"
            echo "Checking for any error logs..."
            ps aux | grep "npm\|node" | grep -v grep || echo "No npm/node processes found"
            echo "npm start logs:"
            cat npm-start.log || echo "No logs available"
            exit 1
          fi
        env:
          NODE_ENV: test
          REACT_APP_API_URL: http://localhost:8080
          CI: true

      - name: Wait for frontend server
        working-directory: ./
        run: |
          echo "Waiting for frontend server to be ready..."
          echo "Checking server status..."
          ps aux | grep "npm run start" || echo "No npm start process found"
          
          # Check for any database connection attempts during startup
          echo "Checking for database connection attempts..."
          sleep 30
          ps aux | grep -i "postgres\|psql\|root" | grep -v grep || echo "No database connection processes found"
          
          # Check if port 3000 is being listened to
          echo "Checking if port 3000 is being listened to..."
          echo "Using netstat:"
          netstat -tlnp 2>/dev/null | grep :3000 || echo "Port 3000 not yet listening"
          
          echo "Using ss:"
          ss -tlnp 2>/dev/null | grep :3000 || echo "Port 3000 not yet listening"
          
          echo "Using lsof:"
          lsof -i :3000 2>/dev/null || echo "Port 3000 not yet listening"
          
          # Check for any error logs from the frontend process
          echo "Checking for frontend process logs..."
          ps aux | grep "npm\|node" | grep -v grep || echo "No npm/node processes found"
          
          echo "Waiting up to 120 seconds for server to be ready..."
          
          # Check npm start logs for any errors
          echo "Checking npm start logs for errors..."
          if [ -f "frontend/npm-start.log" ]; then
            echo "npm start logs (last 30 lines):"
            tail -30 frontend/npm-start.log
          else
            echo "No npm-start.log found"
          fi
          
          # Try to connect to the server before wait-on with more attempts
          echo "Testing server connectivity..."
          for i in {1..8}; do
            echo "Attempt $i: Testing http://localhost:3000..."
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "Server is responding on port 3000!"
              break
            else
              echo "Server not responding yet, waiting 15 seconds..."
              sleep 15
            fi
          done
          
          # Use wait-on with root endpoint for more reliable detection
          echo "Using wait-on with root endpoint..."
          npx wait-on --httpTimeout 10000 --interval 1000 --verbose http://localhost:3000 --timeout 120000
          echo "Frontend server is ready!"
          
          # Final check for any root user database connections
          echo "Final check for root user database connections..."
          ps aux | grep -i "root.*postgres\|postgres.*root" | grep -v grep || echo "No root user postgres connections found"
        env:
          NODE_ENV: test

      - name: Verify frontend server health
        working-directory: ./
        run: |
          echo "Verifying frontend server health..."
          echo "Testing main endpoint..."
          curl -f http://localhost:3000 || exit 1
          echo "Frontend server is healthy!"
        env:
          NODE_ENV: test

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run cypress:run
        env:
          CYPRESS_baseUrl: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: ./frontend/cypress/videos/
          if-no-files-found: ignore

  # セキュリティスキャン
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ビルド
  build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # デプロイ
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # ここに実際のデプロイスクリプトを追加
          # 例: kubectl apply, docker-compose up, など
        env:
          DOCKER_IMAGE: ${{ needs.build.outputs.image }}

      - name: Health check
        run: |
          echo "Performing health check..."
          # ヘルスチェックスクリプト
          sleep 30
          curl -f http://your-production-url/actuator/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "Deployment successful!"
          # Slack通知やメール通知など

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Deployment failed!"
          # 失敗通知 