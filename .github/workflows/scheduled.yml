name: Scheduled Tasks

on:
  schedule:
    # 毎日午前2時に実行
    - cron: '0 2 * * *'
  workflow_dispatch: # 手動実行も可能

jobs:
  # 依存関係の更新チェック
  dependency-update:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        id: outdated
        run: |
          OUTDATED=$(npm outdated --json || echo '{}')
          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT
          
          if [ "$OUTDATED" != "{}" ]; then
            echo "⚠️  Outdated dependencies found"
            echo "$OUTDATED" | jq .
          else
            echo "✅ All dependencies are up to date"
          fi

      - name: Create issue for outdated dependencies
        if: steps.outdated.outputs.outdated != '{}'
        uses: actions/github-script@v7
        with:
          script: |
            const outdated = JSON.parse('${{ steps.outdated.outputs.outdated }}');
            const packages = Object.keys(outdated);
            
            const body = `## Outdated Dependencies Found
            
            The following packages have updates available:
            
            ${packages.map(pkg => `- **${pkg}**: ${outdated[pkg].current} → ${outdated[pkg].latest}`).join('\n')}
            
            ### To update:
            1. Run \`npm update\` to update within current version ranges
            2. Run \`npm install package@latest\` for major version updates
            3. Test thoroughly after updates
            
            ---
            *This issue was automatically created by GitHub Actions*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔧 Dependency Updates Available',
              body: body,
              labels: ['dependencies', 'automated']
            });

  # セキュリティスキャン
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for high severity vulnerabilities
        run: |
          if [ -f trivy-results.sarif ]; then
            VULNS=$(jq '.runs[0].results[] | select(.level == "error")' trivy-results.sarif)
            if [ "$VULNS" != "" ]; then
              echo "🚨 High severity vulnerabilities found!"
              echo "$VULNS" | jq .
              exit 1
            else
              echo "✅ No high severity vulnerabilities found"
            fi
          fi

  # パフォーマンステスト
  performance-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          BUILD_SIZE=$(du -sh build | cut -f1)
          BUILD_SIZE_MB=$(du -sm build | cut -f1)
          
          echo "📦 Build size: $BUILD_SIZE"
          
          # サイズ警告の閾値
          if [ "$BUILD_SIZE_MB" -gt 15 ]; then
            echo "⚠️  Warning: Build size is larger than 15MB"
            exit 1
          elif [ "$BUILD_SIZE_MB" -gt 10 ]; then
            echo "⚠️  Warning: Build size is larger than 10MB"
          else
            echo "✅ Build size is within acceptable limits"
          fi

  # データベースバックアップ（本番環境の場合）
  backup:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Database backup
        run: |
          echo "📦 Creating database backup..."
          
          # 実際のバックアップスクリプト
          # 例: pg_dump, mysqldump など
          
          echo "✅ Backup completed successfully"

      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-$(date +%Y%m%d)
          path: ./backup/
          retention-days: 7

  # 通知
  notify:
    runs-on: ubuntu-latest
    needs: [dependency-update, security-scan, performance-test, backup]
    if: always()

    steps:
      - name: Notify results
        run: |
          echo "📊 Scheduled tasks completed"
          
          # 成功したジョブの確認
          if [ "${{ needs.dependency-update.result }}" == "success" ]; then
            echo "✅ Dependency check: PASSED"
          else
            echo "❌ Dependency check: FAILED"
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ Security scan: PASSED"
          else
            echo "❌ Security scan: FAILED"
          fi
          
          if [ "${{ needs.performance-test.result }}" == "success" ]; then
            echo "✅ Performance test: PASSED"
          else
            echo "❌ Performance test: FAILED"
          fi
          
          if [ "${{ needs.backup.result }}" == "success" ]; then
            echo "✅ Database backup: PASSED"
          else
            echo "❌ Database backup: FAILED"
          fi
          
          # Slack通知の例
          # curl -X POST -H 'Content-type: application/json' \
          #   --data "{\"text\":\"📊 Scheduled tasks completed\"}" \
          #   ${{ secrets.SLACK_WEBHOOK_URL }} 